import json
import statistics
import matplotlib.pyplot as plt
from collections import defaultdict


def load_json(path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞"""
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ —Ñ–∞–π–ª–µ '{path}'.")
        return None


def analyze_performance(
    user_file="/home/aibolat/schoolWithAi/go_recommender/data/users.json",
    grades_file="/home/aibolat/schoolWithAi/go_recommender/data/grades.json",
    courses_file="/home/aibolat/schoolWithAi/go_recommender/data/courses.json"
):
    # 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    users = load_json(user_file)
    grades = load_json(grades_file)
    courses = load_json(courses_file)

    if not users or not grades or not courses:
        return

    # 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤ {id: –Ω–∞–∑–≤–∞–Ω–∏–µ}
    course_names = {c["id"]: c["name"] for c in courses}

    # 3Ô∏è‚É£ –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n")
    for user in users:
        print(f"ID: {user['id']} | –ò–º—è: {user['name']}")

    # 4Ô∏è‚É£ –í–≤–æ–¥ ID —É—á–µ–Ω–∏–∫–∞
    try:
        user_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: "))
    except ValueError:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ID.")
        return

    # 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    selected_user = next((u for u in users if u["id"] == user_id), None)
    if not selected_user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # 6Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_grades = [g for g in grades if g["user_id"] == user_id]
    if not user_grades:
        print(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user['name']} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.")
        return

    # 7Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—É—Ä—Å–∞–º
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞: {selected_user['name']} (ID: {user_id})\n")
    course_scores = defaultdict(list)

    for rec in user_grades:
        score = rec.get("score") or rec.get("rating")  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ rating
        if score is not None:
            course_scores[rec["course_id"]].append(score)
        else:
            print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –±–µ–∑ –æ—Ü–µ–Ω–∫–∏: {rec}")

    if not course_scores:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.")
        return

    overall_scores = []
    avg_per_course = {}
    for course_id, scores in course_scores.items():
        avg = sum(scores) / len(scores)
        avg_per_course[course_id] = avg
        overall_scores.extend(scores)
        course_name = course_names.get(course_id, f"–ö—É—Ä—Å {course_id}")
        print(f"  ‚Ä¢ {course_name}: —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª ‚Äî {avg:.2f}")

    # 8Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_score = sum(overall_scores) / len(overall_scores)
    min_score = min(overall_scores)
    max_score = max(overall_scores)
    std_dev = statistics.stdev(overall_scores) if len(overall_scores) > 1 else 0.0

    print("\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}")
    print(f"  –ú–∏–Ω–∏–º—É–º: {min_score}, –ú–∞–∫—Å–∏–º—É–º: {max_score}")
    print(f"  –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Ä–∞–∑–±—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫): {std_dev:.2f}")

    # 9Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
    if avg_score < 60:
        print("üî∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.")
    elif avg_score < 80:
        if std_dev > 15:
            print("‚ö™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è.")
        else:
            print("‚ö™ –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å ‚Äî —Å—Ç–æ–∏—Ç —Ä–µ—à–∞—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞—á.")
    else:
        if std_dev < 10:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
        else:
            print("‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –Ω–æ –≤–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.")

    # üîü –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(8, 5))
    labels = [course_names.get(cid, f"–ö—É—Ä—Å {cid}") for cid in avg_per_course.keys()]
    plt.bar(labels, avg_per_course.values(), color="#00DFB3")
    plt.title(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –∫—É—Ä—Å–∞–º ‚Äî {selected_user['name']}")
    plt.xlabel("–ö—É—Ä—Å")
    plt.ylabel("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª")
    plt.xticks(rotation=20, ha="right")
    plt.grid(axis="y", linestyle="--", alpha=0.6)
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    analyze_performance()
