from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn
import json
import os

app = FastAPI(title="AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")

# ==========================
# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==========================
def load_json(filename: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ data"""
    path = os.path.join("data", filename)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


# ==========================
# üß© –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ==========================
class User(BaseModel):
    id: int
    name: str
    age: int
    interest: str
    level: str


# ==========================
# üìö –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ==========================
users = load_json("/home/luka/schoolWithAi/go_recommender/data/users.json")
courses = load_json("/home/luka/schoolWithAi/go_recommender/data/courses.json")
user_courses = load_json("/home/luka/schoolWithAi/go_recommender/data/user_courses.json")


# ==========================
# üßÆ –§–£–ù–ö–¶–ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
# ==========================
def similarity(user_a: dict, user_b: dict) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —É—Ä–æ–≤–Ω—è –∏ —Ä–∞–∑–Ω–∏—Ü–µ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ.
    """
    score = 0.0

    if user_a["interest"] == user_b["interest"]:
        score += 0.5

    if user_a["level"] == user_b["level"]:
        score += 0.3

    age_diff = abs(user_a["age"] - user_b["age"])
    score += max(0, 0.2 - age_diff * 0.02)

    return score


def recommend(user: User):
    """
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é.
    """
    # 1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    similar_users = []
    for other in users:
        if other["id"] == user.id:
            continue

        sim_score = similarity(user.dict(), other)
        if sim_score > 0.3:
            similar_users.append((other["id"], sim_score))

    # 2Ô∏è‚É£ –°–±–æ—Ä –∫—É—Ä—Å–æ–≤ –æ—Ç –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    course_scores = {}
    for uid, sim in similar_users:
        for uc in user_courses:
            if uc["user_id"] == uid:
                weighted_score = sim * uc["rating"]
                course_scores[uc["course_id"]] = course_scores.get(uc["course_id"], 0) + weighted_score

    # 3Ô∏è‚É£ –£–±–∏—Ä–∞–µ–º —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    completed = {uc["course_id"] for uc in user_courses if uc["user_id"] == user.id}

    # 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    sorted_courses = sorted(course_scores.items(), key=lambda x: x[1], reverse=True)

    for course_id, score in sorted_courses:
        if course_id in completed:
            continue

        course = next((c for c in courses if c["id"] == course_id), None)
        if not course:
            continue

        interest_bonus = 1.2 if course["category"] == user.interest else 1.0
        level_bonus = 1.1 if course["level"] == user.level else 1.0
        final_score = score * interest_bonus * level_bonus

        recommendations.append({
            **course,
            "score": round(final_score, 2)
        })

    return recommendations[:3]


# ==========================
# üåê API –≠–ù–î–ü–û–ò–ù–¢–´
# ==========================
@app.post("/recommend")
def recommend_api(user: User):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    recs = recommend(user)
    return {
        "user": user.name,
        "recommended": recs
    }


# ==========================
# üöÄ –ó–ê–ü–£–°–ö
# ==========================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
