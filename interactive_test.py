#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–µ—Ä–≤–∏—Å–∞
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

import requests
import json

BASE_URL = "http://localhost:5000"

# –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ seed data
STUDENTS = {
    5: {"name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "interests": ["math", "physics", "programming"]},
    6: {"name": "–ê–ª–∏—è –ù—É—Ä–ª–∞–Ω–æ–≤–∞", "interests": ["literature", "history", "art"]},
    7: {"name": "–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤", "interests": ["science", "biology", "chemistry"]},
    8: {"name": "–ê–π–≥–µ—Ä–∏–º –ê—Å–∞–Ω", "interests": ["math", "physics", "chemistry"]},
    9: {"name": "–ú–∞–∫—Å–∏–º –í–æ–ª–∫–æ–≤", "interests": ["math", "art", "music"]},
    10: {"name": "–ö–∞–º–∏–ª–∞ –¢–µ–º–∏—Ä–≥–∞–ª–∏", "interests": ["history", "geography", "literature"]},
}

def print_menu():
    print("\n" + "="*60)
    print("  üéì ML Service - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("="*60)
    print("\nüìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n")
    print("  1. –ü–æ–ª—É—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("  2. –ü–æ–ª—É—á–∏—Ç—å collaborative —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("  3. –ü–æ–ª—É—á–∏—Ç—å content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("  4. –ü–æ–ª—É—á–∏—Ç—å knowledge-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("  5. –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤—ã–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞")
    print("  6. –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
    print("  7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health")
    print("  0. –í—ã—Ö–æ–¥")
    print()

def print_students():
    print("\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã:")
    print("-" * 60)
    for student_id, info in STUDENTS.items():
        interests = ", ".join(info["interests"])
        print(f"  {student_id}. {info['name']}")
        print(f"     –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}")
    print()

def get_student_choice():
    """–í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print_students()
    
    while True:
        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞: "))
            if choice in STUDENTS:
                return choice
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

def get_recommendations(endpoint: str, student_id: int, top_n: int = 5):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    url = f"{BASE_URL}/recommendations/{endpoint}"
    
    payload = {
        "student_id": student_id,
        "top_n": top_n
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(response.json())
            return None
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ML-—Å–µ—Ä–≤–∏—Å—É!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def display_recommendations(recommendations, algorithm_name: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    if not recommendations:
        print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"\nüìö {algorithm_name} - –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    print("-" * 60)
    
    for i, rec in enumerate(recommendations, 1):
        print(f"\n{i}. {rec['title']}")
        print(f"   ‚≠ê Score: {rec['score']:.3f}")
        print(f"   üìù {rec['reason']}")
        
        if 'details' in rec and rec['details']:
            details = rec['details']
            print(f"   üìä –î–µ—Ç–∞–ª–∏:")
            print(f"      Collaborative: {details.get('collaborative_score', 0):.3f}")
            print(f"      Content-Based: {details.get('content_based_score', 0):.3f}")
            print(f"      Knowledge-Based: {details.get('knowledge_based_score', 0):.3f}")

def test_hybrid():
    """–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    student_id = get_student_choice()
    student_name = STUDENTS[student_id]["name"]
    
    print(f"\nüîç –ü–æ–ª—É—á–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {student_name}...")
    
    recommendations = get_recommendations("hybrid", student_id)
    display_recommendations(recommendations, "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

def test_collaborative():
    """–¢–µ—Å—Ç collaborative filtering"""
    student_id = get_student_choice()
    student_name = STUDENTS[student_id]["name"]
    
    print(f"\nüîç –ü–æ–ª—É—á–∞–µ–º collaborative —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {student_name}...")
    
    recommendations = get_recommendations("collaborative", student_id)
    display_recommendations(recommendations, "Collaborative Filtering")

def test_content_based():
    """–¢–µ—Å—Ç content-based filtering"""
    student_id = get_student_choice()
    student_name = STUDENTS[student_id]["name"]
    
    print(f"\nüîç –ü–æ–ª—É—á–∞–µ–º content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {student_name}...")
    
    recommendations = get_recommendations("content-based", student_id)
    display_recommendations(recommendations, "Content-Based Filtering")

def test_knowledge_based():
    """–¢–µ—Å—Ç knowledge-based filtering"""
    student_id = get_student_choice()
    student_name = STUDENTS[student_id]["name"]
    
    print(f"\nüîç –ü–æ–ª—É—á–∞–µ–º knowledge-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {student_name}...")
    
    recommendations = get_recommendations("knowledge-based", student_id)
    display_recommendations(recommendations, "Knowledge-Based Filtering")

def update_skill():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞"""
    student_id = get_student_choice()
    student_name = STUDENTS[student_id]["name"]
    
    print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –¥–ª—è {student_name}")
    
    skill_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, algebra): ")
    
    while True:
        try:
            score = float(input("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ (0.0 - 1.0): "))
            if 0.0 <= score <= 1.0:
                break
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    payload = {
        "student_id": student_id,
        "skill_name": skill_name,
        "test_score": score
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/skills/update",
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"\n‚úÖ {result['message']}")
            print(f"   –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {result['new_level']:.3f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(response.json())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def compare_algorithms():
    """–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"""
    student_id = get_student_choice()
    student_name = STUDENTS[student_id]["name"]
    
    print(f"\nüî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è {student_name}...")
    print("="*60)
    
    algorithms = [
        ("collaborative", "Collaborative Filtering"),
        ("content-based", "Content-Based Filtering"),
        ("knowledge-based", "Knowledge-Based Filtering"),
        ("hybrid", "Hybrid (Combined)")
    ]
    
    for endpoint, name in algorithms:
        print(f"\n{'='*60}")
        print(f"üìä {name}")
        print('='*60)
        
        recommendations = get_recommendations(endpoint, student_id, top_n=3)
        
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                print(f"{i}. {rec['title']} (Score: {rec['score']:.3f})")
        else:
            print("‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ML-—Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        # Basic health
        response = requests.get(f"{BASE_URL}/", timeout=5)
        print(f"\n‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {response.status_code}")
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        
        # Detailed health
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {response.status_code}")
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
    
    while True:
        print_menu()
        
        try:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == "1":
                test_hybrid()
            elif choice == "2":
                test_collaborative()
            elif choice == "3":
                test_content_based()
            elif choice == "4":
                test_knowledge_based()
            elif choice == "5":
                update_skill()
            elif choice == "6":
                compare_algorithms()
            elif choice == "7":
                test_health()
            elif choice == "0":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            
            input("\n\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()